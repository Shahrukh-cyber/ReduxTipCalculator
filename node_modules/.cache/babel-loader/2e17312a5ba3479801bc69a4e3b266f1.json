{"ast":null,"code":"module.exports = formatter;\nmodule.exports.default = formatter;\n\nfunction formatter(options) {\n  options = options || {}; // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n  // type of negative; default left\n\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left'); // negative symbols '-' or '()'\n\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n\n      default:\n        options.negativeRightSymbol = '';\n    }\n  } // whether negative symbol should be inside/outside prefix and suffix\n\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = options.negativeOut === false ? false : true;\n  }\n\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = options.negativeOut === false ? false : true;\n  } //prefix and suffix\n\n\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || ''; //separators\n\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = typeof options.separator === 'string' ? options.separator : ',';\n  }\n\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.'; //padders\n\n  options.padLeft = options.padLeft || -1; //default no padding\n\n  options.padRight = options.padRight || -1; //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number; //convert number to string if it isn't already\n    } else {\n      return '';\n    } //identify a negative number and make it absolute\n\n\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, ''); //Prepare output with left hand negative and/or prefix\n\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    } //Format core number\n\n\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    } //Prepare output with right hand negative and/or prefix\n\n\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    } //join output and return\n\n\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) {\n        allowedSeparators.push(s);\n      });\n    }\n\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n\n    do {\n      number = newNumber;\n\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n\n    return number;\n  }\n\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    } else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n\n  return format;\n} //where x is already the integer part of the number\n\n\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n\n  return x;\n} //where x is already the decimal part of the number\n\n\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n\n  return x;\n} //where x is the integer part of the number\n\n\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n\n  return buf.join('') + x;\n} //where x is the decimals part of the number\n\n\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n\n  var buf = [];\n\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n\n  return x + buf.join('');\n}\n\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n} //where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\n\n\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places); //if next digit was >= 5 we need to round up\n\n    if (+number[1].substr(places, 1) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n\n      while (decim.charAt(0) === \"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      } //Then we can change decim to a number and add 1 before replacing leading zeros\n\n\n      decim = +decim + 1 + '';\n      decim = leadingzeros + decim;\n\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = +number[0] + +decim.charAt(0) + ''; //add value of firstchar to the integer part\n\n        decim = decim.substring(1); //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n\n    number[1] = decim;\n  }\n\n  return number;\n}","map":{"version":3,"sources":["/Users/macsystem/Desktop/tip-calculator/node_modules/format-number/index.js"],"names":["module","exports","formatter","default","options","negativeType","negative","negativeLeftSymbol","negativeRightSymbol","negativeLeftOut","negativeOut","negativeRightOut","prefix","suffix","integerSeparator","separator","decimalsSeparator","decimal","padLeft","padRight","format","number","overrideOptions","output","charAt","replace","noUnits","push","split","round","truncate","noSeparator","addDecimalSeparators","addIntegerSeparators","join","separate","unformat","allowedSeparators","forEach","s","newNumber","i","length","validate","test","x","rgx","padding","buf","substr","places","decim","slice","leadingzeros","substring"],"mappings":"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","sourcesContent":["\nmodule.exports = formatter;\nmodule.exports.default = formatter;\n\nfunction formatter(options) {\n  options = options || {};\n\n\n  // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n\n  // type of negative; default left\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left')\n\n  // negative symbols '-' or '()'\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n      default:\n        options.negativeRightSymbol = '';\n    }\n  }\n\n  // whether negative symbol should be inside/outside prefix and suffix\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = (options.negativeOut === false ? false : true);\n  }\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = (options.negativeOut === false ? false : true);\n  }\n\n  //prefix and suffix\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || '';\n\n  //separators\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = (typeof options.separator === 'string' ? options.separator : ',');\n  }\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.';\n\n  //padders\n  options.padLeft = options.padLeft || -1 //default no padding\n  options.padRight = options.padRight || -1 //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number;//convert number to string if it isn't already\n    } else {\n      return '';\n    }\n\n    //identify a negative number and make it absolute\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, '');\n\n    //Prepare output with left hand negative and/or prefix\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    //Format core number\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    }\n\n    //Prepare output with right hand negative and/or prefix\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    //join output and return\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) { allowedSeparators.push (s); });\n    }\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n    do {\n      number = newNumber;\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n    return number;\n  }\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    }  else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n  return format;\n}\n\n//where x is already the integer part of the number\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is already the decimal part of the number\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is the integer part of the number\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return buf.join('') + x;\n}\n\n//where x is the decimals part of the number\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return x + buf.join('');\n}\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n}\n\n//where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places);\n    //if next digit was >= 5 we need to round up\n    if (+(number[1].substr(places, 1)) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n      while (decim.charAt(0)===\"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      }\n      //Then we can change decim to a number and add 1 before replacing leading zeros\n      decim = (+decim + 1) + '';\n      decim = leadingzeros + decim;\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = (+number[0]+ +decim.charAt(0)) + ''; //add value of firstchar to the integer part\n        decim = decim.substring(1);   //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n    number[1] = decim;\n  }\n  return number;\n}\n"]},"metadata":{},"sourceType":"script"}