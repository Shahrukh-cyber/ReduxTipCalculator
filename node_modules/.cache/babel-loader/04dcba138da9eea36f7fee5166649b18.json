{"ast":null,"code":"import produce from 'immer';\nimport { ADD_ITEM, REMOVE_ITEM, UPDATE_ITEM_PRICE, UPDATE_ITEM_QUANTITY } from './actions';\nlet id = 1;\nexport const initialItems = [{\n  uuid: id++,\n  name: 'Tofu Roast',\n  price: 14,\n  quantity: 1\n}, {\n  uuid: id++,\n  name: 'Vegan Ham',\n  price: 12,\n  quantity: 1\n}];\nexport const reducer = (state = initialItems, action) => {\n  // if (action.type === ADD_ITEM) {\n  //   const item = { uuid: id++, quantity: 1, ...action.payload }\n  //   return [...state, item]\n  // }\n  if (action.type === ADD_ITEM) {\n    return produce(state, draftState => {\n      const item = {\n        uuid: id++,\n        quantity: 1,\n        ...action.payload\n      };\n      draftState.push(item);\n    });\n  }\n\n  if (action.type === REMOVE_ITEM) {\n    debugger;\n    return state.filter(item => item.uuid !== action.payload.uuid);\n  } // if (action.type === UPDATE_ITEM_PRICE) {\n  //   return state.map(item => {\n  //     if (item.uuid === action.payload.uuid) {\n  //       return { ...item, price: action.payload.price }\n  //     }\n  //     return item;\n  //   })\n  // } \n\n\n  if (action.type === UPDATE_ITEM_PRICE) {\n    return produce(state, draftState => {\n      const item = draftState.find(item => item.uuid === action.payload.uuid);\n      item.price = parseInt(action.payload.uuid, 10);\n    });\n  } // if (action.type === UPDATE_ITEM_QUANTITY) {\n  //   return state.map(item => {\n  //     if (item.uuid === action.payload.uuid) {\n  //       return { ...item, quantity: action.payload.quantity }\n  //     }\n  //     return item;\n  //   })\n  // }\n\n\n  if (action.type === UPDATE_ITEM_QUANTITY) {\n    return produce(state, draftState => {\n      const item = draftState.map(item => item.uuid === action.payload.uuid);\n      item.quantity = parseInt(action.payload.uuid, 10);\n    });\n  }\n\n  return state;\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/macsystem/Desktop/tip-calculator/src/store/items/reducer.js"],"names":["produce","ADD_ITEM","REMOVE_ITEM","UPDATE_ITEM_PRICE","UPDATE_ITEM_QUANTITY","id","initialItems","uuid","name","price","quantity","reducer","state","action","type","draftState","item","payload","push","filter","find","parseInt","map"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,iBAAhC,EAAmDC,oBAAnD,QAA+E,WAA/E;AAEA,IAAIC,EAAE,GAAG,CAAT;AAEA,OAAO,MAAMC,YAAY,GAAG,CAC1B;AAAEC,EAAAA,IAAI,EAAEF,EAAE,EAAV;AAAcG,EAAAA,IAAI,EAAE,YAApB;AAAkCC,EAAAA,KAAK,EAAE,EAAzC;AAA6CC,EAAAA,QAAQ,EAAE;AAAvD,CAD0B,EAE1B;AAAEH,EAAAA,IAAI,EAAEF,EAAE,EAAV;AAAcG,EAAAA,IAAI,EAAE,WAApB;AAAiCC,EAAAA,KAAK,EAAE,EAAxC;AAA4CC,EAAAA,QAAQ,EAAE;AAAtD,CAF0B,CAArB;AAKP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACvD;AACA;AACA;AACA;AACA,MAAIA,MAAM,CAACC,IAAP,KAAgBb,QAApB,EAA8B;AAC5B,WAAOD,OAAO,CAACY,KAAD,EAASG,UAAD,IAAgB;AACpC,YAAMC,IAAI,GAAG;AAAET,QAAAA,IAAI,EAAEF,EAAE,EAAV;AAAcK,QAAAA,QAAQ,EAAE,CAAxB;AAA2B,WAAGG,MAAM,CAACI;AAArC,OAAb;AACAF,MAAAA,UAAU,CAACG,IAAX,CAAgBF,IAAhB;AAED,KAJa,CAAd;AAKD;;AACD,MAAIH,MAAM,CAACC,IAAP,KAAgBZ,WAApB,EAAiC;AAC/B;AACA,WAAOU,KAAK,CAACO,MAAN,CAAaH,IAAI,IAAIA,IAAI,CAACT,IAAL,KAAcM,MAAM,CAACI,OAAP,CAAeV,IAAlD,CAAP;AACD,GAfsD,CAgBvD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,MAAIM,MAAM,CAACC,IAAP,KAAgBX,iBAApB,EAAuC;AACrC,WAAOH,OAAO,CAACY,KAAD,EAASG,UAAD,IAAgB;AACpC,YAAMC,IAAI,GAAGD,UAAU,CAACK,IAAX,CAAiBJ,IAAD,IAAUA,IAAI,CAACT,IAAL,KAAcM,MAAM,CAACI,OAAP,CAAeV,IAAvD,CAAb;AACAS,MAAAA,IAAI,CAACP,KAAL,GAAaY,QAAQ,CAACR,MAAM,CAACI,OAAP,CAAeV,IAAhB,EAAsB,EAAtB,CAArB;AAGD,KALa,CAAd;AAOD,GAjCsD,CAkCvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIM,MAAM,CAACC,IAAP,KAAgBV,oBAApB,EAA0C;AACxC,WAAOJ,OAAO,CAACY,KAAD,EAASG,UAAD,IAAgB;AAEpC,YAAMC,IAAI,GAAGD,UAAU,CAACO,GAAX,CAAeN,IAAI,IAAIA,IAAI,CAACT,IAAL,KAAcM,MAAM,CAACI,OAAP,CAAeV,IAApD,CAAb;AACAS,MAAAA,IAAI,CAACN,QAAL,GAAgBW,QAAQ,CAACR,MAAM,CAACI,OAAP,CAAeV,IAAhB,EAAsB,EAAtB,CAAxB;AAED,KALa,CAAd;AAOD;;AAED,SAAOK,KAAP;AACD,CArDM;AAuDP,eAAeD,OAAf","sourcesContent":["import produce from 'immer';\nimport { ADD_ITEM, REMOVE_ITEM, UPDATE_ITEM_PRICE, UPDATE_ITEM_QUANTITY } from './actions'\n\nlet id = 1;\n\nexport const initialItems = [\n  { uuid: id++, name: 'Tofu Roast', price: 14, quantity: 1 },\n  { uuid: id++, name: 'Vegan Ham', price: 12, quantity: 1 }\n];\n\nexport const reducer = (state = initialItems, action) => {\n  // if (action.type === ADD_ITEM) {\n  //   const item = { uuid: id++, quantity: 1, ...action.payload }\n  //   return [...state, item]\n  // }\n  if (action.type === ADD_ITEM) {\n    return produce(state, (draftState) => {\n      const item = { uuid: id++, quantity: 1, ...action.payload };\n      draftState.push(item);\n\n    })\n  }\n  if (action.type === REMOVE_ITEM) {\n    debugger;\n    return state.filter(item => item.uuid !== action.payload.uuid)\n  }\n  // if (action.type === UPDATE_ITEM_PRICE) {\n  //   return state.map(item => {\n  //     if (item.uuid === action.payload.uuid) {\n  //       return { ...item, price: action.payload.price }\n  //     }\n  //     return item;\n  //   })\n\n  // } \n  if (action.type === UPDATE_ITEM_PRICE) {\n    return produce(state, (draftState) => {\n      const item = draftState.find((item) => item.uuid === action.payload.uuid)\n      item.price = parseInt(action.payload.uuid, 10);\n\n\n    })\n\n  }\n  // if (action.type === UPDATE_ITEM_QUANTITY) {\n  //   return state.map(item => {\n  //     if (item.uuid === action.payload.uuid) {\n  //       return { ...item, quantity: action.payload.quantity }\n  //     }\n  //     return item;\n  //   })\n  // }\n  if (action.type === UPDATE_ITEM_QUANTITY) {\n    return produce(state, (draftState) => {\n\n      const item = draftState.map(item => item.uuid === action.payload.uuid)\n      item.quantity = parseInt(action.payload.uuid, 10)\n\n    })\n\n  }\n\n  return state;\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}