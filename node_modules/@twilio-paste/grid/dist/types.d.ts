/// <reference types="react" />
import type { BoxProps } from '@twilio-paste/box';
import type { ResponsiveValue } from '@twilio-paste/styling-library';
import type { LayoutProps, FlexboxProps, PaddingProps, Space, Padding, SpaceProps } from '@twilio-paste/style-props';
/** element identifier from BoxProps for customization */
export interface GridProps extends React.HTMLAttributes<any>, SpaceProps, Pick<BoxProps, 'element'> {
    as?: keyof JSX.IntrinsicElements;
    children: NonNullable<React.ReactNode>;
    equalColumnHeights?: boolean;
    gutter?: Space;
    vertical?: ResponsiveValue<boolean>;
}
export declare type ColumnMinWidth = ResponsiveValue<'100%' | '0'>;
export declare type ColumnWidthSpan = ResponsiveValue<string>;
export declare type ColumnOffsetOptions = number;
export declare type ColumnOffset = ResponsiveValue<ColumnOffsetOptions>;
export declare type ColumnSpanOptions = number;
export declare type ColumnSpan = ResponsiveValue<ColumnSpanOptions>;
export declare type ColumnPadding = {
    paddingTop?: Padding;
    paddingBottom?: Padding;
    paddingRight?: Padding;
    paddingLeft?: Padding;
};
export interface ColumnStyleProps extends Omit<LayoutProps, 'minWidth' | 'width'>, PaddingProps {
    alignContent?: FlexboxProps['alignContent'];
    marginLeft?: Space;
    minWidth?: ColumnMinWidth;
    width?: ColumnWidthSpan;
}
/** element identifier from BoxProps for customization */
export interface ColumnProps extends React.HTMLAttributes<any>, ColumnStyleProps, Pick<BoxProps, 'element'> {
    as?: keyof JSX.IntrinsicElements;
    children?: React.ReactNode;
    count?: number;
    gutter?: Space;
    offset?: ColumnOffset;
    ref?: any;
    span?: ColumnSpan;
    stretchColumnContent?: boolean;
    vertical?: ResponsiveValue<boolean>;
}
//# sourceMappingURL=types.d.ts.map