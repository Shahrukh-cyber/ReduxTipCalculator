import type { GenericTokensShape, AllGenericTokens } from '@twilio-paste/design-tokens/types/GenericTokensShape';
import type { DesignToken, DesignTokensJSON, TokenPairContrastRating } from '@twilio-paste/design-tokens/types';
/**
 * Filter out any ratings that are not at least aa for text color contrast requirements
 *
 * @param {TokenPairContrastRating[]} ratings token pair color contrast ratio rating
 * @return {*}  {number} total number of failing text contrast pairings
 */
export declare const getNumberOfTextFailures: (ratings: TokenPairContrastRating[]) => number;
/**
 * Filter out any ratings that are not at least aa for large text color contrast requirements
 * which is 3:1, also the same as the newer ui control contrast requirement
 *
 * @param {TokenPairContrastRating[]} ratings token pair color contrast ratio rating
 * @return {*}  {number} total number of failing ui control contrast pairings
 */
export declare const getNumberOfUIControlFailures: (ratings: TokenPairContrastRating[]) => number;
/**
 * remove categorization of design tokens, return a flat list of design tokens
 * by name only
 *
 * @param {Partial<GenericTokensShape>} tokens all the design tokens and their values in the current theme
 * @return {*}  {AllGenericTokens} flatted object of design tokens
 */
export declare const flattenCategorizedTokens: (tokens: Partial<GenericTokensShape>) => AllGenericTokens;
/**
 * Convert the raw design tokens object into an array of design tokens
 *
 * @param {DesignTokensJSON} rawTokens original design tokens object from the design tokens package
 * @return {*}  {DesignToken[]} array of design tokens
 */
export declare const convertRawTokenJSONToArray: (rawTokens: DesignTokensJSON) => DesignToken[];
/**
 * get all color tokens that have text contrast requirements
 *
 * @param {DesignTokensJSON} rawTokens original design tokens object from the design tokens package
 * @return {*}  {DesignToken[]} array of design tokens
 */
export declare const getTokensWithTextContrastRequirements: (rawTokens: DesignTokensJSON) => DesignToken[];
/**
 * get all color tokens that have ui control contrast requirements
 *
 * @param {DesignTokensJSON} rawTokens original design tokens object from the design tokens package
 * @return {*}  {DesignToken[]} array of design tokens
 */
export declare const getTokensWithUIControlContrastRequirements: (rawTokens: DesignTokensJSON) => DesignToken[];
/**
 * build an array of contrast results for each token pairing
 *
 * @param {DesignToken[]} filteredTokens array of token names that we know have contrast requirements
 * @param {AllGenericTokens} tokens all the design tokens and their values in the current theme
 * @param {('text_contrast_pairing' | 'uicontrol_contrast_pairing')} pairingKey the type of contrast checking we're doing
 * @return {*}  {TokenPairContrastRating[]}
 */
export declare const getContrastRatingForTokenPairing: (filteredTokens: DesignToken[], tokens: AllGenericTokens, pairingKey: 'text_contrast_pairing' | 'uicontrol_contrast_pairing') => TokenPairContrastRating[];
/**
 * Takes all design tokens in an object and determines which ones
 * have a text color contrast ratio requirement against another token
 * based on the annotations made in the raw design token files. Those token
 * pairs then have the contrast ratio between them checked and rated.
 * The result of which is returned as an array of ratings
 *
 * @param {Partial<GenericTokensShape>} tokens
 * @return {*}  {TokenPairContrastRating[]}
 */
export declare const getContrastRatingsOfTokensWithTextContrastRequirements: (tokens: Partial<GenericTokensShape>) => TokenPairContrastRating[];
/**
 * Takes all design tokens in an object and determines which ones
 * have a ui control color contrast ratio requirement against another token
 * based on the annotations made in the raw design token files. Those token
 * pairs then have the contrast ratio between them checked and rated.
 * The result of which is returned as an array of ratings
 *
 * @param {Partial<GenericTokensShape>} tokens
 * @return {*}  {TokenPairContrastRating[]}
 */
export declare const getContrastRatingsOfTokensWithUIControlContrastRequirements: (tokens: Partial<GenericTokensShape>) => TokenPairContrastRating[];
//# sourceMappingURL=utils.d.ts.map