/// <reference types="react" />
import type { ResponsiveValue } from '@twilio-paste/styling-library';
import type { LayoutProps, MarginProps, PaddingProps } from '@twilio-paste/style-props';
import type { BoxProps } from '@twilio-paste/box';
export declare type DisplayOptions = 'flex' | 'inline-flex';
export declare type Display = ResponsiveValue<DisplayOptions>;
export declare type VerticalAlignOptions = 'top' | 'center' | 'bottom' | 'stretch';
export declare type VerticalAlign = ResponsiveValue<VerticalAlignOptions>;
export declare type HorizontalAlignOptions = 'left' | 'center' | 'right' | 'around' | 'between';
export declare type HorizontalAlign = ResponsiveValue<HorizontalAlignOptions>;
export declare type VerticalOptions = boolean;
export declare type Vertical = ResponsiveValue<VerticalOptions>;
export declare type GrowOptions = boolean | number;
export declare type Grow = ResponsiveValue<GrowOptions>;
export declare type ShrinkOptions = boolean | number;
export declare type Shrink = ResponsiveValue<ShrinkOptions>;
export declare type BasisOptions = string | number;
export declare type Basis = ResponsiveValue<BasisOptions>;
export declare type WrapOptions = boolean;
export declare type Wrap = ResponsiveValue<WrapOptions>;
export interface FlexProps extends Omit<LayoutProps, 'verticalAlign'>, MarginProps, PaddingProps, Pick<BoxProps, 'element'> {
    as?: keyof JSX.IntrinsicElements;
    children?: React.ReactNode;
    display?: Display;
    vertical?: Vertical;
    vAlignContent?: VerticalAlign;
    hAlignContent?: HorizontalAlign;
    grow?: Grow;
    shrink?: Shrink;
    basis?: Basis;
    wrap?: Wrap;
}
//# sourceMappingURL=types.d.ts.map