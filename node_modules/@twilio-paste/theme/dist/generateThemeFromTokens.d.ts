import type { backgroundColors as BackgroundColors, borderColors as BorderColors, borderWidths as BorderWidths, radii as Radii, fonts as Fonts, fontSizes as FontSizes, fontWeights as FontWeights, lineHeights as LineHeights, boxShadows as BoxShadows, sizings as Sizings, spacings as Spacings, textColors as TextColors, zIndices as ZIndices } from '@twilio-paste/design-tokens';
import type { GenericThemeShape } from './types/GenericThemeShape';
interface GenerateThemeFromTokensArgs {
    backgroundColors: Partial<{
        [key in keyof typeof BackgroundColors]: any;
    }>;
    borderColors: Partial<{
        [key in keyof typeof BorderColors]: any;
    }>;
    borderWidths: Partial<{
        [key in keyof typeof BorderWidths]: any;
    }>;
    radii: Partial<{
        [key in keyof typeof Radii]: any;
    }>;
    fonts: Partial<{
        [key in keyof typeof Fonts]: any;
    }>;
    fontSizes: Partial<{
        [key in keyof typeof FontSizes]: any;
    }>;
    fontWeights: Partial<{
        [key in keyof typeof FontWeights]: any;
    }>;
    lineHeights: Partial<{
        [key in keyof typeof LineHeights]: any;
    }>;
    boxShadows: Partial<{
        [key in keyof typeof BoxShadows]: any;
    }>;
    sizings: {
        [key in keyof typeof Sizings]: any;
    };
    spacings: Partial<{
        [key in keyof typeof Spacings]: any;
    }>;
    textColors: Partial<{
        [key in keyof typeof TextColors]: any;
    }>;
    zIndices: Partial<{
        [key in keyof typeof ZIndices]: any;
    }>;
}
export declare const generateThemeFromTokens: ({ backgroundColors, borderColors, borderWidths, radii, fonts, fontSizes, fontWeights, lineHeights, boxShadows, sizings, spacings, textColors, zIndices, }: GenerateThemeFromTokensArgs) => GenericThemeShape;
export {};
//# sourceMappingURL=generateThemeFromTokens.d.ts.map