/// <reference types="react" />
import { StyledBase } from './themeProvider';
import type { ThemeProviderProps } from './themeProvider';
declare const Theme: {
    Provider: import("react").FunctionComponent<ThemeProviderProps>;
    Consumer: ({ children, ...props }: import("./themeConsumer").ThemeConsumerProps) => import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)>;
};
export { pasteBaseStyles } from './styles/base';
export { pasteGlobalStyles } from './styles/global';
export { pasteFonts } from './styles/fonts';
export { StyledBase };
export type { ThemeProviderProps };
export type { ThemeShape, SendGridThemeShape, ConsoleThemeShape, DarkThemeShape } from './types/themes';
export type { GenericThemeShape } from './types/GenericThemeShape';
export { DefaultTheme, ConsoleTheme, SendGridTheme, DarkTheme } from './themes';
export { withTheme } from './withTheme';
export { useTheme } from './useTheme';
export { ThemeVariants } from './constants';
export { generateThemeFromTokens } from './generateThemeFromTokens';
export { generateTokensFromTheme } from './generateTokensFromTheme';
export { Theme };
export { remToPx } from './utils/remToPx';
export * from './useThemeContrastCheck';
//# sourceMappingURL=index.d.ts.map