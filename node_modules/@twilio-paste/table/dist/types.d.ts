/// <reference types="react" />
import * as PropTypes from 'prop-types';
import { ValueOf } from '@twilio-paste/types';
import { WidthOptions } from '@twilio-paste/style-props';
import { TableAlignmentObject, TableLayoutObject, TableVariantObject, TableVerticalAlignmentObject } from './constants';
export declare type TableAlignmentOptions = ValueOf<typeof TableAlignmentObject>;
export declare type TableLayoutOptions = ValueOf<typeof TableLayoutObject>;
export declare type TableVariantOptions = ValueOf<typeof TableVariantObject>;
export declare type TableVerticalAlignmentOptions = ValueOf<typeof TableVerticalAlignmentObject>;
export interface TableContextProps {
    striped: boolean;
}
export interface TableProps extends React.TableHTMLAttributes<HTMLTableElement> {
    children: NonNullable<React.ReactNode>;
    striped?: boolean;
    tableLayout?: TableLayoutOptions;
    variant?: TableVariantOptions;
}
export declare const TablePropTypes: {
    children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
    striped: PropTypes.Requireable<boolean>;
    tableLayout: PropTypes.Requireable<ValueOf<{
        readonly AUTO: "auto";
        readonly FIXED: "fixed";
    }>>;
    variant: PropTypes.Requireable<ValueOf<{
        readonly DEFAULT: "default";
        readonly BORDERLESS: "borderless";
    }>>;
};
export interface THeadProps extends React.TableHTMLAttributes<HTMLTableSectionElement> {
    children: NonNullable<React.ReactNode>;
}
export declare const THeadPropTypes: {
    children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
};
export interface TBodyProps extends React.TableHTMLAttributes<HTMLTableSectionElement> {
    children: NonNullable<React.ReactNode>;
}
export declare const TBodyPropTypes: {
    children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
};
export interface TrProps extends React.TableHTMLAttributes<HTMLTableRowElement> {
    children: NonNullable<React.ReactNode>;
    verticalAlign?: TableVerticalAlignmentOptions;
}
export declare const TrPropTypes: {
    children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
    verticalAlign: PropTypes.Requireable<ValueOf<{
        readonly TOP: "top";
        readonly MIDDLE: "middle";
        readonly BOTTOM: "bottom";
    }>>;
};
export interface ThProps extends React.ThHTMLAttributes<HTMLTableHeaderCellElement> {
    children?: React.ReactNode;
    textAlign?: TableAlignmentOptions;
    width?: WidthOptions;
}
export declare const ThPropTypes: {
    children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    textAlign: PropTypes.Requireable<ValueOf<{
        readonly LEFT: "left";
        readonly CENTER: "center";
        readonly RIGHT: "right";
    }>>;
    width: PropTypes.Requireable<any>;
};
export interface TdProps extends React.TdHTMLAttributes<HTMLTableCellElement> {
    children?: React.ReactNode;
    textAlign?: TableAlignmentOptions;
}
export declare const TdPropTypes: {
    children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    textAlign: PropTypes.Requireable<ValueOf<{
        readonly LEFT: "left";
        readonly CENTER: "center";
        readonly RIGHT: "right";
    }>>;
};
export interface TFootProps extends React.TableHTMLAttributes<HTMLTableSectionElement> {
    children: NonNullable<React.ReactNode>;
}
export declare const TFootPropTypes: {
    children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
};
//# sourceMappingURL=types.d.ts.map