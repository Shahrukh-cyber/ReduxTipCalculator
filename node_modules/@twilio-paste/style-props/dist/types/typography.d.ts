import type * as CSS from 'csstype';
import type { ThemeShape } from '@twilio-paste/theme';
import type { ResponsiveValue, TLengthStyledSystem } from '@twilio-paste/styling-library';
export declare type FontFamilyOptions = keyof ThemeShape['fonts'] | 'inherit';
export declare type FontSizeOptions = keyof ThemeShape['fontSizes'] | '100%' | 'inherit';
export declare type FontWeightOptions = keyof ThemeShape['fontWeights'] | 'inherit';
export declare type LineHeightOptions = keyof ThemeShape['lineHeights'] | 'unset' | 'inherit';
export declare type TextColorOptions = keyof ThemeShape['textColors'] | 'currentColor' | 'inherit' | 'transparent';
export declare type FontFamily = ResponsiveValue<FontFamilyOptions>;
export declare type FontSize = ResponsiveValue<FontSizeOptions>;
export declare type FontWeight = ResponsiveValue<FontWeightOptions>;
export declare type LineHeight = ResponsiveValue<LineHeightOptions>;
export declare type TextColor = ResponsiveValue<TextColorOptions>;
export declare type LetterSpacingOptions = CSS.LetterSpacingProperty<TLengthStyledSystem>;
export declare type TextAlignOptions = CSS.TextAlignProperty;
export declare type FontStyleOptions = CSS.FontStyleProperty;
export declare type WhiteSpaceOptions = CSS.WhiteSpaceProperty;
export declare type WordBreakOptions = CSS.WordBreakProperty;
export declare type WordWrapOptions = CSS.WordWrapProperty;
export declare type OverflowWrapOptions = CSS.OverflowWrapProperty;
export declare type TextDecorationOptions = CSS.TextDecorationProperty<CSS.TextDecorationLineProperty>;
export declare type TextOverflowOptions = CSS.TextOverflowProperty;
export declare type TextTransformOptions = CSS.TextTransformProperty;
export declare type LetterSpacing = ResponsiveValue<LetterSpacingOptions>;
export declare type TextAlign = ResponsiveValue<TextAlignOptions>;
export declare type FontStyle = ResponsiveValue<FontStyleOptions>;
export declare type WhiteSpace = ResponsiveValue<WhiteSpaceOptions>;
export declare type WordBreak = ResponsiveValue<WordBreakOptions>;
export declare type WordWrap = ResponsiveValue<WordWrapOptions>;
export declare type OverflowWrap = ResponsiveValue<OverflowWrapOptions>;
export declare type TextDecoration = ResponsiveValue<TextDecorationOptions>;
export declare type TextOverflow = ResponsiveValue<TextOverflowOptions>;
export declare type TextTransform = ResponsiveValue<TextTransformOptions>;
export interface TypographyProps {
    fontFamily?: FontFamily;
    fontSize?: FontSize;
    fontWeight?: FontWeight;
    lineHeight?: LineHeight;
    letterSpacing?: LetterSpacing;
    textAlign?: TextAlign;
    fontStyle?: FontStyle;
    color?: TextColor;
    textDecoration?: TextDecoration;
    textOverflow?: TextOverflow;
    textTransform?: TextTransform;
    whiteSpace?: WhiteSpace;
    wordBreak?: WordBreak;
    wordWrap?: WordWrap;
    overflowWrap?: OverflowWrap;
}
//# sourceMappingURL=typography.d.ts.map