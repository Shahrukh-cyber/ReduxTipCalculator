import * as React from 'react';
import type { GenericThemeShape } from '@twilio-paste/theme';
import type { BoxStyleProps } from '@twilio-paste/box';
import type { HeadingProps } from '@twilio-paste/heading';
/**
 * Returns the styles needed for the icon color and transitions
 * @param {boolean} isHovered
 * @param {HeadingProps['variant']} variant
 * @param {boolean} ariaExapanded
 * @param {boolean} ariaDisabled If set to true, the function will return only a color style
 * @param {GenericThemeShape['space']} space
 * @returns {BoxStyleProps} Color style if ariaDisabled is false, or color, transform, and transition styles depending on variant if ariaDisabled is false
 */
export declare const getIconHoverStyles: (isHovered: boolean, variant: HeadingProps['variant'], ariaExpanded: boolean | 'true' | 'false' | undefined, ariaDisabled: boolean | 'true' | 'false' | undefined, space: GenericThemeShape['space']) => Pick<BoxStyleProps, 'color' | 'transform' | 'transition'>;
export declare const useHover: <T extends HTMLElement = HTMLElement>(elementRef: React.RefObject<T>) => boolean;
//# sourceMappingURL=utils.d.ts.map