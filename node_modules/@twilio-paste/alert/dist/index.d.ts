import * as React from 'react';
import type { ValueOf } from '@twilio-paste/types';
export declare const AlertRoles: {
    readonly ERROR: "alert";
    readonly NEUTRAL: "status";
    readonly WARNING: "alert";
};
export declare const AlertVariants: {
    readonly ERROR: "error";
    readonly NEUTRAL: "neutral";
    readonly WARNING: "warning";
};
export declare const AlertBackgroundColors: {
    readonly ERROR: "colorBackgroundErrorWeakest";
    readonly NEUTRAL: "colorBackgroundNeutralWeakest";
    readonly WARNING: "colorBackgroundWarningWeakest";
};
export declare const AlertBorderColors: {
    readonly ERROR: "colorBorderErrorWeak";
    readonly NEUTRAL: "colorBorderNeutral";
    readonly WARNING: "colorBorderWarningWeak";
};
export declare type AlertVariants = ValueOf<typeof AlertVariants>;
export declare type AlertBackgroundColors = ValueOf<typeof AlertBackgroundColors>;
export declare type AlertBorderColors = ValueOf<typeof AlertBorderColors>;
export declare type AlertRoles = ValueOf<typeof AlertRoles>;
export interface AlertProps {
    id?: never;
    className?: never;
    children: NonNullable<React.ReactNode>;
    onDismiss?: () => void;
    role?: string;
    variant: AlertVariants;
}
declare const Alert: React.ForwardRefExoticComponent<AlertProps & React.RefAttributes<HTMLDivElement>>;
export { Alert };
//# sourceMappingURL=index.d.ts.map